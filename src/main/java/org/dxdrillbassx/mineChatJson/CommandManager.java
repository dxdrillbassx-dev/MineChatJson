package org.dxdrillbassx.mineChatJson;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.ArrayList;
import java.util.List;

public class CommandManager {
    private final JavaPlugin plugin;
    private final ChatManager chatManager;
    private final DatabaseManager databaseManager;
    private final EmojiManager emojiManager;
    private final InventoryListener inventoryListener;

    public CommandManager(JavaPlugin plugin, ChatManager chatManager, DatabaseManager databaseManager, EmojiManager emojiManager, InventoryListener inventoryListener) {
        this.plugin = plugin;
        this.chatManager = chatManager;
        this.databaseManager = databaseManager;
        this.emojiManager = emojiManager;
        this.inventoryListener = inventoryListener;
    }

    public void registerCommands() {
        plugin.getCommand("chatcolor").setExecutor(new ChatColorCommand());
        plugin.getCommand("togglechat").setExecutor(new ToggleChatCommand());
        plugin.getCommand("help").setExecutor(new HelpCommand());
        plugin.getCommand("rename").setExecutor(new RenameCommand());
        plugin.getCommand("chatsound").setExecutor(new ChatSoundCommand());
        plugin.getCommand("chatsound").setTabCompleter(new ChatSoundTabCompleter());
        plugin.getCommand("emoji").setExecutor(new EmojiCommand());
        plugin.getCommand("reload").setExecutor(new ReloadCommand());
        plugin.getCommand("chateffect").setExecutor(new ChatEffectCommand());
        plugin.getCommand("joinmessage").setExecutor(new JoinMessageCommand());
        plugin.getCommand("joinmessage").setTabCompleter(new JoinMessageTabCompleter());
    }

    private class ChatColorCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤! üö´");
                return true;
            }

            Player player = (Player) sender;
            if (!player.hasPermission("minechatjson.chatcolor")) {
                player.sendMessage(ChatColor.translateAlternateColorCodes('&',
                        plugin.getConfig().getString("colors.msgs.no-perm", "&c–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ üö´")));
                return true;
            }

            player.openInventory(inventoryListener.createColorInventory(player));
            return true;
        }
    }

    private class ToggleChatCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!sender.hasPermission("minechatjson.togglechat")) {
                sender.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤! üö´");
                return true;
            }

            chatManager.setChatEnabled(!chatManager.isChatEnabled());
            String status = chatManager.isChatEnabled() ? "&a–ß–∞—Ç –≤–∫–ª—é—á—ë–Ω! ‚úÖ" : "&c–ß–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω! üîá";
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', status));
            if (plugin.getConfig().getBoolean("chat.broadcast-actions", true)) {
                Bukkit.broadcastMessage(ChatColor.translateAlternateColorCodes('&',
                        chatManager.isChatEnabled() ? "&a–ß–∞—Ç –≤–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! ‚úÖ" : "&c–ß–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! üîá"));
            }
            return true;
        }
    }

    private class HelpCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&6&l=== MineChatJson –ü–æ–º–æ—â—å ==="));
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/chatcolor &7- –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —á–∞—Ç–∞ üé®"));
            if (sender.hasPermission("minechatjson.togglechat")) {
                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/togglechat &7- –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å —á–∞—Ç üîäüîá"));
            }
            if (sender.hasPermission("minechatjson.rename")) {
                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/rename <–Ω–∏–∫> &7- –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–∏–∫ ‚úèÔ∏è"));
                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/rename remove &7- –°–±—Ä–æ—Å–∏—Ç—å –Ω–∏–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π üóëÔ∏è"));
            }
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/chatsound &7- –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –∑–≤—É–∫ —á–∞—Ç–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∑–≤—É–∫ üîä"));
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/emoji &7- –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üòä"));
            if (sender.hasPermission("minechatjson.chateffect")) {
                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/chateffect &7- –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ç–µ–∫—Å—Ç–∞ üé®"));
            }
            if (sender.hasPermission("minechatjson.reload")) {
                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/reload &7- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞ üîÑ"));
            }
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/joinmessage &7- –í—ã–±—Ä–∞—Ç—å –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üëã"));
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&e/help &7- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å ‚ÑπÔ∏è"));
            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&6&l=== –ü–ª–∞–≥–∏–Ω by dxdrillbassx ==="));
            return true;
        }
    }

    private class RenameCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤! üö´");
                return true;
            }

            Player player = (Player) sender;
            if (!player.hasPermission("minechatjson.rename")) {
                player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤! üö´");
                return true;
            }

            if (args.length != 1) {
                player.sendMessage(ChatColor.RED + "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rename <–Ω–æ–≤—ã–π_–Ω–∏–∫> –∏–ª–∏ /rename remove");
                return true;
            }

            try {
                if (args[0].equalsIgnoreCase("remove")) {
                    databaseManager.removePlayerNickname(player.getUniqueId());
                    player.setDisplayName(player.getName());
                    player.setPlayerListName(player.getName());
                    player.sendMessage(ChatColor.GREEN + "–ù–∏–∫ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π! üóëÔ∏è");
                    return true;
                }

                String newNick = args[0];
                if (newNick.length() > 16) {
                    player.sendMessage(ChatColor.RED + "–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 16 —Å–∏–º–≤–æ–ª–æ–≤! üö´");
                    return true;
                }

                if (!newNick.matches("[a-zA-Z0-9_]+")) {
                    player.sendMessage(ChatColor.RED + "–ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è! üö´");
                    return true;
                }

                player.setDisplayName(ChatColor.translateAlternateColorCodes('&', newNick));
                player.setPlayerListName(ChatColor.translateAlternateColorCodes('&', newNick));
                databaseManager.setPlayerNickname(player.getUniqueId(), newNick);
                player.sendMessage(ChatColor.GREEN + "–ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ " + newNick + "! ‚úèÔ∏è");
                return true;
            } catch (Exception e) {
                plugin.getLogger().severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /rename: " + e.getMessage());
                e.printStackTrace();
                player.sendMessage(ChatColor.RED + "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–∞! üòî");
                return true;
            }
        }
    }

    private class ChatSoundCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤! üö´");
                return true;
            }

            Player player = (Player) sender;
            if (args.length == 0) {
                boolean currentSoundState = databaseManager.isChatSoundEnabled(player.getUniqueId());
                boolean newSoundState = !currentSoundState;
                databaseManager.setChatSound(player.getUniqueId(), newSoundState);
                String status = newSoundState ? "&a–ó–≤—É–∫ —á–∞—Ç–∞ –≤–∫–ª—é—á—ë–Ω! üîä" : "&c–ó–≤—É–∫ —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω! üîá";
                player.sendMessage(ChatColor.translateAlternateColorCodes('&', status));
                return true;
            } else if (args[0].equalsIgnoreCase("select")) {
                if (!player.hasPermission("minechatjson.chatsound.select")) {
                    player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–≤—É–∫–∞! üö´");
                    return true;
                }
                player.openInventory(inventoryListener.createSoundInventory(player));
                return true;
            } else {
                player.sendMessage(ChatColor.RED + "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /chatsound [select]");
                return true;
            }
        }
    }

    private class ChatSoundTabCompleter implements TabCompleter {
        @Override
        public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
            List<String> completions = new ArrayList<>();
            if (args.length == 1 && sender.hasPermission("minechatjson.chatsound.select")) {
                completions.add("select");
            }
            return completions;
        }
    }

    private class EmojiCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤! üö´");
                return true;
            }

            Player player = (Player) sender;
            if (!player.hasPermission("minechatjson.emoji")) {
                player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤! üö´");
                return true;
            }

            if (args.length == 0) {
                player.openInventory(emojiManager.createEmojiInventory(player));
                return true;
            } else if (args[0].equalsIgnoreCase("preview") && args.length == 2) {
                if (!player.hasPermission("minechatjson.emoji.preview")) {
                    player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–º–æ–¥–∑–∏! üö´");
                    return true;
                }
                String emojiKey = args[1].toLowerCase();
                String emoji = emojiManager.getEmojiSymbol(emojiKey);
                if (emoji == null || !player.hasPermission("minechatjson.emoji." + emojiKey)) {
                    player.sendMessage(ChatColor.RED + "–≠–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤! üö´");
                    return true;
                }
                player.sendMessage(ChatColor.translateAlternateColorCodes('&',
                        "&e–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: &f–ü—Ä–∏–≤–µ—Ç, " + player.getName() + "! " + emoji));
                return true;
            } else {
                player.sendMessage(ChatColor.RED + "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /emoji [preview <–Ω–∞–∑–≤–∞–Ω–∏–µ_—ç–º–æ–¥–∑–∏>]");
                return true;
            }
        }
    }

    private class ReloadCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!sender.hasPermission("minechatjson.reload")) {
                sender.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤! üö´");
                return true;
            }

            try {
                ((Main) plugin).reloadPluginConfig();
                sender.sendMessage(ChatColor.GREEN + "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞! ‚úÖ");
                if (plugin.getConfig().getBoolean("chat.broadcast-actions", true)) {
                    Bukkit.broadcastMessage(ChatColor.translateAlternateColorCodes('&',
                            "&a–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! üîÑ"));
                }
            } catch (Exception e) {
                plugin.getLogger().severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + e.getMessage());
                e.printStackTrace();
                sender.sendMessage(ChatColor.RED + "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! üòî");
            }
            return true;
        }
    }

    private class ChatEffectCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤! üö´");
                return true;
            }

            Player player = (Player) sender;
            if (!player.hasPermission("minechatjson.chateffect")) {
                player.sendMessage(ChatColor.translateAlternateColorCodes('&',
                        plugin.getConfig().getString("effects.msgs.no-perm", "&c–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ üö´")));
                return true;
            }

            player.openInventory(inventoryListener.createEffectInventory(player));
            return true;
        }
    }

    private class JoinMessageCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤! üö´");
                return true;
            }

            Player player = (Player) sender;
            if (!player.hasPermission("minechatjson.joinmessage")) {
                player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤! üö´");
                return true;
            }

            if (args.length == 0) {
                player.openInventory(inventoryListener.createJoinMessageInventory(player));
                return true;
            } else if (args[0].equalsIgnoreCase("set") && args.length > 1) {
                if (!player.hasPermission("minechatjson.joinmessage.set")) {
                    player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! üö´");
                    return true;
                }
                String message = String.join(" ", args).substring(4); // –£–¥–∞–ª—è–µ–º "set "
                if (message.length() > 100) {
                    player.sendMessage(ChatColor.RED + "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤! üö´");
                    return true;
                }
                databaseManager.setPlayerJoinMessage(player.getUniqueId(), message);
                player.sendMessage(ChatColor.GREEN + "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + ChatColor.translateAlternateColorCodes('&', message) + " ‚úÖ");
                return true;
            } else if (args[0].equalsIgnoreCase("remove")) {
                databaseManager.removePlayerJoinMessage(player.getUniqueId());
                player.sendMessage(ChatColor.GREEN + "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ! üóëÔ∏è");
                return true;
            } else {
                player.sendMessage(ChatColor.RED + "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /joinmessage [set <—Å–æ–æ–±—â–µ–Ω–∏–µ> | remove]");
                return true;
            }
        }
    }

    private class JoinMessageTabCompleter implements TabCompleter {
        @Override
        public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
            List<String> completions = new ArrayList<>();
            if (args.length == 1 && sender.hasPermission("minechatjson.joinmessage.set")) {
                completions.add("set");
                completions.add("remove");
            }
            return completions;
        }
    }
}